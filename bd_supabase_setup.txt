-- Supabase schema generated from Laravel migrations (v2 – 2025-08-06)
-- Las JWT claims necesarias:
--   role    → 'admin' | 'worker' | 'citizen'
--   user_id → id numérico de la tabla users
----------------------------------------------------------------------
-- 1. Extensiones
create extension if not exists "pgcrypto";

-- 2. Tipos ENUM
do $$
begin
  if not exists (select 1 from pg_type where typname = 'user_role')     then create type user_role     as enum ('admin','worker','citizen'); end if;
  if not exists (select 1 from pg_type where typname = 'recinto_state') then create type recinto_state as enum ('Disponible','No disponible','Bloqueado'); end if;
  if not exists (select 1 from pg_type where typname = 'curso_state')   then create type curso_state   as enum ('Disponible','No disponible','Cancelado'); end if;
  if not exists (select 1 from pg_type where typname = 'status_activa') then create type status_activa as enum ('activa','cancelada'); end if;
end$$;

-- 3. Tablas dominio principal ----------------------------------------------
create table if not exists users (
  id bigserial primary key,
  name varchar(255) not null,
  surname varchar(255) not null,
  dni varchar(255) not null unique,
  email varchar(255) not null unique,
  email_verified_at timestamptz,
  password varchar(255) not null,
  phone varchar(50) not null,
  role user_role default 'citizen',
  image varchar(255),
  remember_token varchar(100),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists recintos (
  id bigserial primary key,
  name varchar(255) not null,
  description varchar(255) not null,
  ubication varchar(255) not null,
  province varchar(255) not null,
  postal_code varchar(20) not null,
  image varchar(255),
  state recinto_state default 'Disponible',
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists cursos (
  id bigserial primary key,
  name varchar(255) not null,
  description varchar(255),
  location varchar(255),
  begining_date date,
  end_date date,
  price numeric(8,2) default 0,
  state curso_state default 'Disponible',
  capacity integer default 0,
  image varchar(255),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists reservas (
  id bigserial primary key,
  user_id bigint references users(id) on delete cascade,
  recinto_id bigint references recintos(id) on delete cascade,
  price numeric(10,2) not null,
  start_at timestamptz not null,
  end_at   timestamptz not null,
  status status_activa default 'activa',
  paid boolean default false,
  observations varchar(255),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists inscripciones (
  id bigserial primary key,
  user_id bigint references users(id) on delete cascade,
  curso_id bigint references cursos(id) on delete cascade,
  status status_activa default 'activa',
  paid boolean default false,
  cancelled_by bigint references users(id) on delete set null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- 4. Tablas auxiliares Laravel ----------------------------------------------
create table if not exists password_reset_tokens (
  email varchar(255) primary key,
  token varchar(255) not null,
  created_at timestamptz
);

create table if not exists sessions (
  id varchar(255) primary key,
  user_id bigint references users(id),
  ip_address varchar(45),
  user_agent text,
  payload text not null,
  last_activity integer not null
);

create table if not exists cache (
  key varchar(255) primary key,
  value text not null,
  expiration integer not null
);

create table if not exists cache_locks (
  key varchar(255) primary key,
  owner varchar(255) not null,
  expiration integer not null
);

create table if not exists jobs (
  id bigserial primary key,
  queue varchar(255) not null,
  payload text not null,
  attempts smallint not null,
  reserved_at integer,
  available_at integer not null,
  created_at integer not null
);

create table if not exists job_batches (
  id varchar(255) primary key,
  name varchar(255) not null,
  total_jobs integer not null,
  pending_jobs integer not null,
  failed_jobs integer not null,
  failed_job_ids text not null,
  options text,
  cancelled_at integer,
  created_at integer not null,
  finished_at integer
);

create table if not exists failed_jobs (
  id bigserial primary key,
  uuid varchar(255) unique not null,
  connection text not null,
  queue text not null,
  payload text not null,
  exception text not null,
  failed_at timestamptz default now()
);

-- 5. RLS ---------------------------------------------------------------------
alter table users         enable row level security;
alter table recintos      enable row level security;
alter table reservas      enable row level security;
alter table inscripciones enable row level security;

-- 5.1 USERS
create policy select_users_self_or_staff
  on users for select
  using (
    id = current_setting('jwt.claims.user_id', true)::bigint
    or current_setting('jwt.claims.role', true) in ('admin','worker')
  );

create policy update_users_self_or_staff
  on users for update
  using (
    id = current_setting('jwt.claims.user_id', true)::bigint
    or current_setting('jwt.claims.role', true) in ('admin','worker')
  )
  with check (
    id = current_setting('jwt.claims.user_id', true)::bigint
    or current_setting('jwt.claims.role', true) in ('admin','worker')
  );

-- 5.2 RECINTOS
create policy public_read_recintos
  on recintos for select using (true);

create policy staff_write_recintos
  on recintos for all
  using (current_setting('jwt.claims.role', true) in ('admin','worker'))
  with check (current_setting('jwt.claims.role', true) in ('admin','worker'));

-- 5.3 RESERVAS
create policy select_reservas
  on reservas for select
  using (
    current_setting('jwt.claims.role', true) in ('admin','worker')
    or user_id = current_setting('jwt.claims.user_id', true)::bigint
  );

create policy insert_reservas
  on reservas for insert
  with check (
    user_id = current_setting('jwt.claims.user_id', true)::bigint
    or current_setting('jwt.claims.role', true) in ('admin','worker')
  );

create policy update_reservas
  on reservas for update
  using (
    current_setting('jwt.claims.role', true) in ('admin','worker')
    or user_id = current_setting('jwt.claims.user_id', true)::bigint
  );

-- 5.4 INSCRIPCIONES
create policy select_inscripciones
  on inscripciones for select
  using (
    current_setting('jwt.claims.role', true) in ('admin','worker')
    or user_id = current_setting('jwt.claims.user_id', true)::bigint
  );

create policy insert_inscripciones
  on inscripciones for insert
  with check (
    user_id = current_setting('jwt.claims.user_id', true)::bigint
    or current_setting('jwt.claims.role', true) in ('admin','worker')
  );

-- 6. Índices útiles ----------------------------------------------------------
create index if not exists idx_reservas_user       on reservas(user_id);
create index if not exists idx_reservas_recinto    on reservas(recinto_id);
create index if not exists idx_inscripciones_user  on inscripciones(user_id);
create index if not exists idx_inscripciones_curso on inscripciones(curso_id);
